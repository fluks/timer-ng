package fluks.timerng;

import fluks.timerng.sound.NoSound;
import fluks.timerng.sound.Beep;
import fluks.timerng.sound.AbstractClipWrapper;
import fluks.timerng.sound.Alarm;
import java.awt.Color;
import java.awt.GraphicsEnvironment;
import java.awt.Point;
import java.awt.Window;
import java.io.InputStream;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.JOptionPane;
import javax.swing.JSlider;
import javax.swing.SwingUtilities;

public class GUI extends javax.swing.JFrame {
    final private TimeUnits time = new TimeUnits();
    final private TimeUnits targetTime = new TimeUnits();
    private Timer timer;
    private Timer timeLabelFlashTimer = null;
    private Color timeLabelFg;
    private boolean timerIsRunning = false;
    private AbstractClipWrapper beep = new Beep();
    private AbstractClipWrapper alarm = new Alarm();
    private static final String BEEP_FILE = "/resources/beep.wav";
    private static final String ALARM_FILE = "/resources/alarm.wav";

    public GUI() {
        initComponents();
        intervalCheckbox.setEnabled(false);
        setLocation(getScreenCenterForWindow((Window) this));
        getRootPane().setDefaultButton(startStopButton);
        timeLabelFg = timeLabel.getForeground();

        beep = loadSound(beep, BEEP_FILE);
        alarm = loadSound(alarm, ALARM_FILE);

        if ((beep instanceof NoSound) && (alarm instanceof NoSound)) {
            volumeSlider.setEnabled(false);
            muteCheckbox.setEnabled(false);
        }

        alarm.setVolume(getSliderMiddle(volumeSlider),
            getSlideRange(volumeSlider));
        beep.setVolume(getSliderMiddle(volumeSlider),
            getSlideRange(volumeSlider));
    }

    /** Load a sound object by opening a clip for it.
     * @param cw An object, which clip will be opened.
     * @param resource A path to resource. cw opens a clip to this resource.
     * @return An object, which clip is opened to the resource, or if something
     * fails, a {@link fi.fluks.NoSound NoSound} instance, which doesn't do
     * anything.
     */
    private AbstractClipWrapper loadSound(AbstractClipWrapper cw,
        String resource) {
        try (InputStream is = getClass().getResourceAsStream(resource)) {
            if (is == null)
                throw new Exception("Can't get system resource, " + resource);
            cw.openClip(is);
        }
        catch (Exception e) {
            cw.closeClip();
            JOptionPane.showMessageDialog(this,
                "Failed to load audio.\n\n" + e.getMessage());
            cw = new NoSound();
        }

        return cw;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu3 = new javax.swing.JMenu();
        timeLabel = new javax.swing.JLabel();
        intervalCheckbox = new javax.swing.JCheckBox();
        startStopButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        muteCheckbox = new javax.swing.JCheckBox();
        volumeSlider = new javax.swing.JSlider();
        volumeLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        millisecondSpinner = new javax.swing.JSpinner();
        minuteSpinner = new javax.swing.JSpinner();
        hourSpinner = new javax.swing.JSpinner();
        secondSpinner = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        quitMenuItem = new javax.swing.JMenuItem();

        jMenu3.setText("jMenu3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        timeLabel.setFont(new java.awt.Font("Dialog", 1, 48)); // NOI18N
        timeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        timeLabel.setText("00:00:00:000");

        intervalCheckbox.setMnemonic('i');
        intervalCheckbox.setText("Interval");
        intervalCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                intervalCheckboxActionPerformed(evt);
            }
        });

        startStopButton.setMnemonic('s');
        startStopButton.setText("Start/Stop");
        startStopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startStopButtonActionPerformed(evt);
            }
        });

        resetButton.setMnemonic('r');
        resetButton.setText("Reset");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        muteCheckbox.setMnemonic('m');
        muteCheckbox.setText("Mute");
        muteCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                muteCheckboxActionPerformed(evt);
            }
        });

        volumeSlider.setOrientation(javax.swing.JSlider.VERTICAL);
        volumeSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                volumeSliderStateChanged(evt);
            }
        });

        volumeLabel.setIcon(new javax.swing.ImageIcon("/usr/share/icons/Mint-X-Dark/status/22/stock_volume.png")); // NOI18N

        millisecondSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 999, 1));
        millisecondSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                millisecondSpinnerStateChanged(evt);
            }
        });

        minuteSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 59, 1));
        minuteSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                minuteSpinnerStateChanged(evt);
            }
        });

        hourSpinner.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(0), Integer.valueOf(0), null, Integer.valueOf(1)));
        hourSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                hourSpinnerStateChanged(evt);
            }
        });

        secondSpinner.setModel(new javax.swing.SpinnerNumberModel(0, 0, 59, 1));
        secondSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                secondSpinnerStateChanged(evt);
            }
        });

        jLabel1.setDisplayedMnemonic('h');
        jLabel1.setLabelFor(hourSpinner);
        jLabel1.setText("hours");

        jLabel2.setDisplayedMnemonic('n');
        jLabel2.setLabelFor(minuteSpinner);
        jLabel2.setText("minutes");

        jLabel3.setDisplayedMnemonic('e');
        jLabel3.setLabelFor(secondSpinner);
        jLabel3.setText("seconds");

        jLabel4.setDisplayedMnemonic('l');
        jLabel4.setLabelFor(millisecondSpinner);
        jLabel4.setText("milliseconds");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(hourSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(minuteSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(secondSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(millisecondSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {hourSpinner, millisecondSpinner, minuteSpinner, secondSpinner});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(hourSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(minuteSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(secondSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(millisecondSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {hourSpinner, millisecondSpinner, minuteSpinner, secondSpinner});

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        quitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        quitMenuItem.setMnemonic('q');
        quitMenuItem.setText("Quit");
        quitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(quitMenuItem);

        jMenuBar1.add(fileMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(muteCheckbox)
                    .addComponent(volumeLabel)
                    .addComponent(volumeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(timeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(startStopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(resetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(intervalCheckbox))
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {resetButton, startStopButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(timeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(27, 27, 27)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(intervalCheckbox)
                        .addGap(24, 24, 24))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(volumeSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(volumeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(startStopButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(muteCheckbox))
                .addGap(26, 26, 26))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {resetButton, startStopButton});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void muteCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_muteCheckboxActionPerformed
        if (muteCheckbox.isSelected()) {
            alarm.mute(true);
            beep.mute(true);
        }
        else {
            alarm.mute(false);
            beep.mute(false);
        }
    }//GEN-LAST:event_muteCheckboxActionPerformed

    private void intervalCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_intervalCheckboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_intervalCheckboxActionPerformed

    private void quitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitMenuItemActionPerformed
        alarm.closeClip();
        beep.closeClip();
        System.exit(0);
    }//GEN-LAST:event_quitMenuItemActionPerformed

    private Timer flashTime(Timer tOld) {
        if (tOld != null)
            tOld.cancel();

        Color bg = timeLabel.getBackground();
        Timer t = new Timer();
        t.scheduleAtFixedRate(new TimerTask() {
            private boolean b = true;
            private int i = 0;
            @Override
            public void run() {
                Color c = b ? bg : timeLabelFg;
                b = !b;
                SwingUtilities.invokeLater(() -> {
                    timeLabel.setForeground(c);
                });
                System.out.println(i++);
            }
        }, 0, 500);

        return t;
    }

    private void startStopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startStopButtonActionPerformed
        if (!timerIsRunning) {
            timerIsRunning = true;
            boolean isIntervalSelected = intervalCheckbox.isSelected();
            boolean isTargetTimeSet = isTargetTimeSet();
            intervalCheckbox.setEnabled(false);
            setSpinnersEnabled(false);

            timer = new Timer();
            timer.scheduleAtFixedRate(new TimerTask() {
                @Override
                public void run() {
                    /* Everything using Swing components, must be done from
                     * its event dispatching thread. */
                    SwingUtilities.invokeLater(() -> {
                        if (isTargetTimeSet &&
                            !isIntervalSelected &&
                            TimeUnits.timeUnitsAreEqual(time, targetTime)) {
                            timer.cancel();
                            alarm.play();
                            timeLabelFlashTimer = flashTime(timeLabelFlashTimer);

                            intervalCheckbox.setEnabled(true);
                            setSpinnersEnabled(true);
                        }
                        else if (timerIsRunning) {
                            time.advance();
                            timeLabel.setText(time.toString());
                        }

                        if (isIntervalSelected &&
                            targetTime.timeInMilliseconds() != 0 &&
                            time.mod(targetTime) == 0) {
                            beep.play();
                        }
                    });
                }
            }, 1, 1);
        }
        else {
            timer.cancel();
            if (timeLabelFlashTimer != null) {
                timeLabelFlashTimer.cancel();
                timeLabelFlashTimer = null;
            }
            timerIsRunning = false;
            alarm.stopAndRewind();
            
            setSpinnersEnabled(true);
            enableIntervalIfTargetTimeIsSet();
            timeLabel.setForeground(timeLabelFg);
        }
    }//GEN-LAST:event_startStopButtonActionPerformed

    /** Check is target time set. It's set if at least some of the spinners
     * is non-zero.
     * @return False if all the spinners have zero value, true otherwise.
     */
    private boolean isTargetTimeSet() {
        return ((Integer) hourSpinner.getValue()) != 0 ||
               ((Integer) minuteSpinner.getValue()) != 0 ||
               ((Integer) secondSpinner.getValue()) != 0 ||
               ((Integer) millisecondSpinner.getValue()) != 0;
    }

    /** Enable or disable all the spinners.
     * @param b Enable or disable spinners.
     */
    private void setSpinnersEnabled(boolean b) {
        hourSpinner.setEnabled(b);
        minuteSpinner.setEnabled(b);
        secondSpinner.setEnabled(b);
        millisecondSpinner.setEnabled(b);
    }

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        if (timer != null)
            timer.cancel();
        if (timeLabelFlashTimer != null) {
            timeLabelFlashTimer.cancel();
            timeLabelFlashTimer = null;
        }
        timerIsRunning = false;
        time.reset();
        targetTime.reset();
        timeLabel.setText(time.toString());
        timeLabel.setForeground(timeLabelFg);
        hourSpinner.setValue(0);
        minuteSpinner.setValue(0);
        secondSpinner.setValue(0);
        millisecondSpinner.setValue(0);
        setSpinnersEnabled(true);
        alarm.stopAndRewind();
        enableIntervalIfTargetTimeIsSet();
    }//GEN-LAST:event_resetButtonActionPerformed

    /** Interval checkbox can be enabled only when target time is set.
     * Enable interval checkbox when target time is set. Otherwise, disable
     * checkbox and set it unselected.
     */
    private void enableIntervalIfTargetTimeIsSet() {
        if (isTargetTimeSet())
            intervalCheckbox.setEnabled(true);
        else {
            intervalCheckbox.setEnabled(false);
            intervalCheckbox.setSelected(false);
        }
    }
    
    private void hourSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_hourSpinnerStateChanged
        targetTime.setHours((Integer) hourSpinner.getValue());
        enableIntervalIfTargetTimeIsSet();
    }//GEN-LAST:event_hourSpinnerStateChanged

    private void minuteSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_minuteSpinnerStateChanged
        targetTime.setMinutes((Integer) minuteSpinner.getValue());
        enableIntervalIfTargetTimeIsSet();
    }//GEN-LAST:event_minuteSpinnerStateChanged

    private void secondSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_secondSpinnerStateChanged
        targetTime.setSeconds((Integer) secondSpinner.getValue());
        enableIntervalIfTargetTimeIsSet();
    }//GEN-LAST:event_secondSpinnerStateChanged

    private void millisecondSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_millisecondSpinnerStateChanged
        targetTime.setMilliseconds((Integer) millisecondSpinner.getValue());
        enableIntervalIfTargetTimeIsSet();
    }//GEN-LAST:event_millisecondSpinnerStateChanged

    private void volumeSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_volumeSliderStateChanged
        int volume = volumeSlider.getValue();
        beep.setVolume(volume, getSlideRange(volumeSlider));
        alarm.setVolume(volume, getSlideRange(volumeSlider));
        
        if (muteCheckbox.isSelected()) {
            muteCheckbox.setSelected(false);
            beep.mute(false);
            alarm.mute(false);
        }
    }//GEN-LAST:event_volumeSliderStateChanged

    /** Get range of the slider. |slider.max - slider.min|.
     * @param slider
     * @return The range of the slider.
     */
    private static int getSlideRange(JSlider slider) {
        return Math.abs(slider.getMaximum() - slider.getMinimum());
    }

    /** Get middle value of a slider component.
     * @param slider
     * @return
     */
    private static int getSliderMiddle(JSlider slider) {
        return (slider.getMaximum() - slider.getMinimum()) / 2;
    }

    /** Calculate such a point for a window, that when positioned on that
     * point, the window will be in the center of the screen.
     * @return Point for centering a window.
     */
    private static Point getScreenCenterForWindow(Window c) {
        double height = c.getBounds().getHeight();
        double width  = c.getBounds().getWidth();
        Point center  = GraphicsEnvironment.getLocalGraphicsEnvironment().
            getCenterPoint();
        center.setLocation(center.getX() - width / 2,
                           center.getY() - height / 2);
        
        return center;
    }

    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new GUI().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu fileMenu;
    private javax.swing.JSpinner hourSpinner;
    private javax.swing.JCheckBox intervalCheckbox;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSpinner millisecondSpinner;
    private javax.swing.JSpinner minuteSpinner;
    private javax.swing.JCheckBox muteCheckbox;
    private javax.swing.JMenuItem quitMenuItem;
    private javax.swing.JButton resetButton;
    private javax.swing.JSpinner secondSpinner;
    private javax.swing.JButton startStopButton;
    private javax.swing.JLabel timeLabel;
    private javax.swing.JLabel volumeLabel;
    private javax.swing.JSlider volumeSlider;
    // End of variables declaration//GEN-END:variables
}
